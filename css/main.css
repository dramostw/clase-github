*{
    margin: 0px;
    padding: 0px;
    box-sizing: border-box;
}
/*propiedades del padre contenedor, como en flexbox, en grid la caracteristica se aplica al padre*/
.padre{
    height: 800px;
    display: grid;
    /*propiedades de grid (no vienen por defecto)
    propiedad para filas y propiedad para columnas
    */
    grid-template-columns: 1fr 1fr 3fr 1fr ;
    grid-template-rows: 20% 60% 20% ;

    column-gap: 10px;
    row-gap: 10px;
    /*para aplicar esas propiedades de una se puede usar la propiedad GAP y se aplica tanto a las columnas como a las filas*/
}

/*propiedades de los hijos*/

.hijoUno{
    background-color: aqua;
}

.hijoDos{
    background-color: blue;
}

.hijoTres{
    background-color: brown;
}

.hijoCuatro{
    background-color: yellow;
}

/*ejemplo 2*/
.ejemplo{
    background-color: darksalmon;
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr 1fr;
    /*para centrar el contenido, vertical y horizontalmente*/
    justify-content: center;
    justify-items: center;

    align-items: center;
    /*para que nos funcione alinear a los hijos, el padre debe tener una altura definida*/
    height: 500px;

}

/*propiedades de ls hijos*/

.imagen-1{
    justify-self: end;
    align-self: flex-end;
    background-color: blue;
}

/*ultimo ejemplo*/
.contenedor{
    height: 100vh;
    display: grid;
    grid-template-columns: 1fr 1fr 2fr;
    grid-template-rows: 0.5fr 1fr 0.5fr;

    /*sirve para repartir las areas de mi html*/
    grid-template-areas: 
        "header header header"
        "main main section"
        "footer footer footer"
    ;
}

header{
    background-color: blue;
    grid-area: header;
    display: flex;
}

main{
    background-color: chartreuse;
    grid-area: main;
}

section{
    background-color: fuchsia;
    grid-area: section;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-content: flex-start;
}

footer{
    background-color: crimson;
    grid-area: footer;
}